import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.geometry.HPos;
import javafx.geometry.Pos;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.effect.DropShadow;
import javafx.scene.layout.ColumnConstraints;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Region;
import javafx.scene.paint.Color;
import javafx.scene.shape.ArcTo;
import javafx.scene.shape.MoveTo;
import javafx.scene.shape.Path;
import javafx.scene.text.Font;
import javafx.stage.DirectoryChooser;
import javafx.stage.FileChooser;

public class Controller {

//List that contains the data for a given protein
private List<Protein> proteins ;

//List that contains the data for a given protein
private List<Peptide> peptides; 

// Map that contains matched protein ID and sequence
private Map <String, String> proteinIdSequenceMap;

private Protein selectedProtein;

// Directory to proteinGroups file and fasta file
String path;
String fastaPath;

//TableView that contains protein data
@FXML
TableView<Protein> table;

//TableView that contains peptide data
@FXML
TableView<Peptide> table2;
@FXML
TableView<ObservableList<String>> table3;

//Columns table 1
@FXML
TableColumn<Protein, String> proteinIDsColumn;
@FXML
TableColumn<Protein, String> proteinNamesColumn;
@FXML
TableColumn<Protein, String> geneNamesColumn;
@FXML
TableColumn<Protein, String> sequencesColumn;

// Columns table 2
@FXML
 TableColumn<Peptide, String> peptideIDsColumn;
@FXML
  TableColumn<Peptide, String> peptideSequencesColumn;
@FXML
 TableColumn<Peptide, String> aaBeforesColumn;
@FXML
TableColumn<Peptide, String> aaLastsColumn;
@FXML
TableColumn<Peptide, String> peptideIntensitiesColumn;
@FXML
TableColumn<Peptide, String> cTerminalProteaseColumn;
@FXML
TableColumn<Peptide, String> nTerminalProteaseColumn;

//ChoiceBox
@FXML
ChoiceBox<String> box;

// Panes
@FXML
GridPane gridPane;
@FXML
ScrollPane scrollPane;
@FXML
HBox hbox;

//Charts
@FXML
LineChart<Number, Number> lineChart2;


//Axis
@FXML
NumberAxis xAxis;
@FXML
NumberAxis yAxis;

// Labels 
@FXML
Label labelSelectedDirectory;
@FXML
Label status;
@FXML
Label numberOfProteins;
@FXML
Label numberOfPeptides;
@FXML
Label labelSelectedEnzyme;



/**
 *  User chooses directory path to protein file (generated by Max Quant).
 *  Protein is filled.
 *  Peptide table is filled if fasta file (Protein sequence data) has been chosen.
 *  Proteins are matched to their peptides.
 *  Cleavage sites are assigned to their proteases.
 *  @throws IOException
 */
	public void directoryChooser() throws IOException {
		
		box.setValue("");
		
		DirectoryChooser directoryChooser = new DirectoryChooser();
		File selectedDirectory =  directoryChooser.showDialog(null);
		
		if(selectedDirectory == null){
		    labelSelectedDirectory.setText("No Directory selected");
		   
		    }else{
		        labelSelectedDirectory.setText(selectedDirectory.getAbsolutePath());
		        path = selectedDirectory.getAbsolutePath();
		        
		     // If the selected file does not contain a proteinGroups file.
		        if(!Files.exists(Paths.get(path+"\\proteinGroups.txt"))){
    				labelSelectedDirectory.setText("Please select Max Quant file.");
            		return;
           
    			}else{
			    		fillProteinList();
			    		fillPeptideList();
			            PeptidetoProteinMatcher.match(proteins, peptides);
			            ProteaseIdentification.matchProtease(peptides);
			           
			            //Add change listener to realize selection of item in table.
			            table.getSelectionModel().selectedItemProperty().addListener((observableValue, oldValue, newValue) -> {
			            
			            //Check whether item is selected and assign it to selectedProtein.
		            	if (table.getSelectionModel().getSelectedItem() != null) {
		            		selectedProtein = table.getSelectionModel().getSelectedItem();
		            		
		            		// If the sequence data has been chosen.
		            		
		            		if ( selectedProtein.getsequence() == null){
			                	labelSelectedDirectory.setText("Please select fasta file.");
			                }else{
			                	
		            			List<Peptide> peptides = selectedProtein.getPeptides();  
		            			
				            	//Create ObservableList to fill peptide table.
				            	ObservableList<Peptide>tableList2 = FXCollections.observableList(peptides);
				            	table2.setItems(tableList2);
				            		
				            	//Show number of items in peptide table. 
				            	int numberOfLinesTable2 =  table2.getItems().size();
				           		numberOfPeptides.setText(numberOfLinesTable2 + " items");
				           		 
				           		//Adjust scrollPane and add gridpane to it.
				           		scrollPane.setFitToHeight(true);
				           		scrollPane.setContent(gridPane);
				           		
								scrollPane.setHvalue(0.0);
								gridPane.getChildren().clear();
								
								//Sequence is added to gridpane, creating a column for each amino acid.
								int index = 0;
				        		for (String aa : FillBottomPanes.getAAList(selectedProtein)){
				        			Label label = new Label(aa);
				        			label.setMaxWidth(Double.MAX_VALUE);
				        			label.setAlignment(Pos.CENTER);
									gridPane.add(label,index + 1 ,1);
									label.setWrapText(true);
									label.setFont(new Font("Arial", 26));
									index++;								
				        		}	
				        		
//				        		Label emptyLabel = new Label("a");
//				        		gridPane.add(emptyLabel, FillBottomPanes.getAAList(selectedProtein).size()+ 3, 1);
//				        		gridPane.add(emptyLabel, FillBottomPanes.getAAList(selectedProtein).size()+ 4, 1);
				        		
				        		final int COLUMN_WIDTH = 30;
				        		gridPane.getColumnConstraints().clear();
								List<ColumnConstraints> columnList = new ArrayList<>();
									
								//Adjust gridPane width.
								for (int in = 0; in < selectedProtein.getsequence().length(); in++) {
										columnList.add(new ColumnConstraints(COLUMN_WIDTH));
								}
								columnList.add(new ColumnConstraints(COLUMN_WIDTH));
								gridPane.getColumnConstraints().addAll(columnList);
									
								//every 10th position of the sequence is labeled with number of amino acid
								int numberOfColumns = gridPane.getColumnConstraints().size();
								for (int j = 1; j < numberOfColumns; j++){
						
										if (j % 10 == 0 ){
											Label countAaLabel = new Label(String.valueOf(j));
											countAaLabel.setFont(new Font("Axel", 12));
											GridPane.setHalignment(countAaLabel, HPos.CENTER);
											gridPane.add(countAaLabel, j, 0);
										
											
										}
									}
									
								
								// New Cleavages are created.
								if (selectedProtein.getCleavages() == null){
									Cleavages cleavages = new Cleavages();
									 
									/* 
									* Data of cleavage sites of selected protein are saved in cleavages object.
									*/
									for (Peptide pep : selectedProtein.getPeptides()){
										if (pep.getPeptideIntensity() != ""){
											if (pep.getStartPositions() != ""){
												if (pep.getEndPositions() != ""){
													if (pep.getnTerminalProtease() != null){
														if (pep.getcTerminalProtease() != null){
															if(pep.getExpIntensityMap() != null){
																long intens = new BigDecimal(pep.getPeptideIntensity().replace(",", ".")).longValue();
																cleavages.setCleavagesMaps((Integer.parseInt(pep.getStartPositions().
																		replace(",", "."))) - 1,intens, pep.getnTerminalProtease(), pep.getExpIntensityMap(), 
																		selectedProtein.getsequence().length());
																cleavages.setCleavagesMaps((Integer.parseInt(pep.getEndPositions().
																		replace(",", "."))), intens, pep.getcTerminalProtease(),  pep.getExpIntensityMap(),
																		selectedProtein.getsequence().length());
															}
														}
													}
												}
											}
										}
									}
									
									selectedProtein.setCleavages(cleavages);
								}
							
							
								
								//Linechart is added to gridpane.
								gridPane.add(FillBottomPanes.getLineChart(selectedProtein.getCleavages(), 
										selectedProtein.getsequence().length()),0 ,5, numberOfColumns, 10);
								
							    xAxis.setLabel("Position");
							    yAxis.setLabel("Intensity");
								xAxis.setTickLabelFill(Color.CHOCOLATE);
								yAxis.setTickLabelFill(Color.CHOCOLATE);
								yAxis.setTickLabelsVisible(false);
								
								//Loop through cleavage position : intensity map and creates double arcs with intensity labels at cleavage position.
								for (int key : selectedProtein.getCleavages().getCleavagesIntensityMap().keySet()) {
									
									//Create double arc.
									double radius = 35.0;
									Path path = new Path();
							        path.setStroke(Color.DODGERBLUE);
							        MoveTo moveTo1 = new MoveTo();
							        moveTo1.setX(radius);
							        moveTo1.setY(radius);
					
							        ArcTo arcTo1 = new ArcTo();
							        arcTo1.setX(radius);
							        arcTo1.setY(radius + 3*radius);
							        arcTo1.setRadiusX(1.5*radius);
							        arcTo1.setRadiusY(1.5*radius);
							        arcTo1.setSweepFlag(true);
							       
							        path.getElements().add(moveTo1);
							        path.getElements().add(arcTo1);
							        MoveTo moveTo = new MoveTo();
							        moveTo.setX(radius + 3*radius);
							        moveTo.setY(radius);
					
							        ArcTo arcTo = new ArcTo();
							        arcTo.setX(radius + 3*radius);
							        arcTo.setY(radius + 3*radius);
							        arcTo.setRadiusX(1.5*radius);
							        arcTo.setRadiusY(1.5*radius);
					
							        path.getElements().add(moveTo);
							        path.getElements().add(arcTo);
							     
								    //Add double arc to gridPane at each cleavage site.
									gridPane.add(path, key-1, 1);
									
									//Add intensity label at each cleavage site.
									Label intensityLabel = 
											new Label(String.valueOf(selectedProtein.getCleavages().getCleavagesIntensityMap().get(key)));
									gridPane.add(intensityLabel, key, 2, 10, 1);
									intensityLabel.setWrapText(true);
									intensityLabel.setMinWidth(Region.USE_PREF_SIZE);
									intensityLabel.setMaxWidth(Region.USE_PREF_SIZE);
									intensityLabel.setFont(new Font("Axel", 12));
								}	
								
								// Add protease label at each cleavage site.
								for (int key : selectedProtein.getCleavages().getCleavagesProteaseMap().keySet()) {
									
									Label proteaseLabel = new Label(selectedProtein.getCleavages().getCleavagesProteaseMap().get(key));
									gridPane.add(proteaseLabel, key, 3, 10, 1);
									proteaseLabel.setWrapText(true);
									proteaseLabel.setMinWidth(Region.USE_PREF_SIZE);
									proteaseLabel.setMaxWidth(Region.USE_PREF_SIZE);
									proteaseLabel.setFont(new Font("Axel", 12));
									
								}
								
								//Choicebox is filled with enzymes.
								box.getItems().clear();
								for (String enzyme: EnzymeMapFactory.getEnzymeNames()){ 
									box.getItems().add(enzyme);
								}
								labelSelectedEnzyme.setText("Please select enzyme.");
			                	if (box.getSelectionModel().getSelectedItem() == null){
			    	    	  		labelSelectedEnzyme.setText("Please select enzyme.");
			    	    	  	}
			                	
								box.getSelectionModel()
								    .selectedItemProperty()
								    .addListener 	(new ChangeListener<String>() {
								    	      @Override
								    	      public void changed(ObservableValue<? extends String> observableValue, String oldValue, String newValue) {
								    	    	  	String enzyme = box.getSelectionModel().getSelectedItem();
								    	    	  	labelSelectedEnzyme.setText("");
													lineChart2.getData().clear();
													lineChart2.setData(FXCollections.observableArrayList(FillBottomPanes.getLineChart2Data(selectedProtein.getCleavages(), enzyme)));
													table3.getItems().clear();
													table3.getColumns().clear();
													FillBottomPanes.FillBottomTable(selectedProtein.getCleavages(),table3);
													if (FillBottomPanes.newPositionIntensitiesMap.isEmpty()){
								                		labelSelectedEnzyme.setText("No cleavage site found for this enzyme.");
								                	}
								    	      }
								    	  
								    });
								
										
				             }										
		                }});
		            	
		    		}
		  
		    }
		        
	}
	
	/*
	 * Fasta file is chosen by user.
	 * Fasta file is read and protein sequences are extracted.
	 * Sequences are matched to their proteins.
	 */
	public void FileChooserFasta() throws IOException {
			  
		  // Request if all data is loaded into proteins list, if not prompt to choose proteins file (Max Quant).
		  if ( proteins == null) {
			  labelSelectedDirectory.setText("The Max Quant file must be uploaded first, to match the protein sequences with.");
			  return;
			}
		  
	      FileChooser dirChooserFasta = new FileChooser();
	      File selectedFile =  dirChooserFasta.showOpenDialog(null);
	      if(selectedFile == null){
			labelSelectedDirectory.setText("No Directory selected");
	     
	      }else{
	    	labelSelectedDirectory.setText(selectedFile.getAbsolutePath());
	    	fastaPath = selectedFile.getAbsolutePath();
	      }if (fastaPath.endsWith("fasta")){
			proteinIdSequenceMap = FastaReader.read(fastaPath);
			SequencetoProteinMatcher.matchStP(proteins, proteinIdSequenceMap);
	      }else{
			labelSelectedDirectory.setText("Please select fasta file.");
	      }
	}
	/*
	 * A file is created by the user.
	 * The table is converted to a csv file, written into the file and saved at the chosen directory.
	 */
	public void FileChooserSaveDialog() throws IOException {
	          FileChooser fileChooser = new FileChooser();

	          //Set extension filter
	          FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("TXT files (*.txt)", "*.txt");
	          fileChooser.getExtensionFilters().add(extFilter);

	          //Show save file dialog
	          File file = fileChooser.showSaveDialog(null);
	          CreateCsv.Createcsv(table3.getItems(), selectedProtein.getCleavages(), file.getPath());
	      }
	  
	  /*
	   * Protein data is read.
	   * Cells in table columns are populated.
	   * Protein table is filled with the chosen data.
	   */
	 public void fillProteinList() throws IOException{
		  proteins = ProteinReader.read(path);
		  proteinIDsColumn.setCellValueFactory(new PropertyValueFactory<Protein, String>("proteinIDs"));
		  proteinNamesColumn.setCellValueFactory(new PropertyValueFactory<Protein, String>("proteinNames"));
		  geneNamesColumn.setCellValueFactory(new PropertyValueFactory<Protein, String>("geneNames"));
		  sequencesColumn.setCellValueFactory(new PropertyValueFactory<Protein,String>("sequences"));
		  
		  ObservableList<Protein>tableList = FXCollections.observableList(proteins);
		  table.getItems().clear();
		  table.setItems(tableList);
		  
		  //creates label to show number of table rows
		  int numberOfLines =  table.getItems().size();
		  numberOfProteins.setText(numberOfLines + " items");
		
		  status.setText("All loaded.");
		
	 }
	 
	  /*
	   * Peptide data is read.
	   * Cells in table columns are populated.
	   */
	 public void fillPeptideList() throws IOException{
	  	peptides = PeptideReader.read(path);
		peptideIDsColumn.setCellValueFactory(new PropertyValueFactory<Peptide, String>("peptideIDs"));		
		peptideSequencesColumn.setCellValueFactory(new PropertyValueFactory<Peptide, String>("peptideSequences"));		 
		aaBeforesColumn.setCellValueFactory(new PropertyValueFactory<Peptide, String>("aaBefores"));	
		aaLastsColumn.setCellValueFactory(new PropertyValueFactory<Peptide, String>("aaLasts"));
		peptideIntensitiesColumn.setCellValueFactory(new PropertyValueFactory<Peptide, String>("peptideIntensities"));
		cTerminalProteaseColumn.setCellValueFactory(new PropertyValueFactory<Peptide, String>("cTerminalProteases"));
		nTerminalProteaseColumn.setCellValueFactory(new PropertyValueFactory<Peptide, String>("nTerminalProteases"));
	
			
	 }

}